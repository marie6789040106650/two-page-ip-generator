import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, Table, TableRow, TableCell, WidthType, Header } from 'docx'
import * as cheerio from 'cheerio'

interface ExportOptions {
  html: string
  watermarkConfig?: any
  styleConfig?: any
  metadata?: any
}

interface ExportResult {
  buffer: Buffer
  filename: string
  metadata: {
    exportTime: number
    fileSize: number
    pageCount: number
  }
}

export class WordExportEngine {
  // 处理中文字符的辅助函数
  private sanitizeText(text: string): string {
    // 对于Word导出，我们暂时将中文字符替换为占位符
    // 这是一个临时解决方案，实际应用中需要更好的中文支持
    return text.replace(/[\u4e00-\u9fff]/g, '?')
  }

  async exportToWord(options: ExportOptions): Promise<ExportResult> {
    const startTime = Date.now()

    try {
      // 解析HTML内容，确保正确处理中文字符
      const $ = cheerio.load(options.html, { decodeEntities: false })

      // 转换HTML为Word文档结构
      const children = await this.convertHTMLToWordElements($)

      // 创建Word文档
      let doc = new Document({
        sections: [{
          properties: {
            page: {
              margin: {
                top: options.styleConfig?.margins?.top || 720, // 0.5英寸 = 720 twips
                right: options.styleConfig?.margins?.right || 720,
                bottom: options.styleConfig?.margins?.bottom || 720,
                left: options.styleConfig?.margins?.left || 720,
              },
            },
          },
          children,
        }],
        title: options.metadata?.title || 'Document',
        creator: 'HTML Export Engine',
        description: 'Generated by HTML Export Engine',

      })

      // 添加水印
      if (options.watermarkConfig?.enabled) {
        doc = this.addWatermarkToDocument(doc, options.watermarkConfig)
      }

      // 生成文档缓冲区
      const buffer = await Packer.toBuffer(doc)

      const exportTime = Date.now() - startTime
      const filename = `${this.sanitizeText(options.metadata?.title || 'Document')}_${new Date().toISOString().slice(0, 10)}.docx`

      return {
        buffer,
        filename,
        metadata: {
          exportTime,
          fileSize: buffer.length,
          pageCount: Math.ceil(buffer.length / 50000) // 估算页数
        }
      }

    } catch (error) {
      console.error('Word export failed:', error)
      throw new Error(`Word导出失败: ${error instanceof Error ? error.message : '未知错误'}`)
    }
  }

  private async convertHTMLToWordElements($: cheerio.Root): Promise<any[]> {
    const elements: any[] = []

    // 遍历HTML元素
    $('body').children().each((index, element) => {
      const $element = $(element)
      const tagName = (element as any).tagName?.toLowerCase()

      switch (tagName) {
        case 'h1':
          elements.push(new Paragraph({
            children: [new TextRun({
              text: this.sanitizeText($element.text()),
              bold: true,
              size: 32
            })],
            heading: HeadingLevel.HEADING_1,
            alignment: AlignmentType.CENTER,
            spacing: { after: 240 }
          }))
          break

        case 'h2':
          elements.push(new Paragraph({
            children: [new TextRun({
              text: this.sanitizeText($element.text()),
              bold: true,
              size: 24
            })],
            heading: HeadingLevel.HEADING_2,
            spacing: { before: 240, after: 120 }
          }))
          break

        case 'h3':
          elements.push(new Paragraph({
            children: [new TextRun({
              text: this.sanitizeText($element.text()),
              bold: true,
              size: 20
            })],
            heading: HeadingLevel.HEADING_3,
            spacing: { before: 120, after: 120 }
          }))
          break

        case 'p':
          const text = $element.text().trim()
          if (text) {
            elements.push(new Paragraph({
              children: [new TextRun({
                text: this.sanitizeText(text)
              })],
              spacing: { after: 120 },
              alignment: AlignmentType.JUSTIFIED
            }))
          }
          break

        case 'ul':
        case 'ol':
          $element.find('li').each((liIndex, liElement) => {
            const liText = $(liElement).text().trim()
            if (liText) {
              elements.push(new Paragraph({
                children: [new TextRun({
                  text: this.sanitizeText(`${tagName === 'ol' ? `${liIndex + 1}. ` : '• '}${liText}`)
                })],
                spacing: { after: 60 },
                indent: { left: 360 } // 0.25英寸缩进
              }))
            }
          })
          break

        case 'table':
          const tableRows: TableRow[] = []

          $element.find('tr').each((rowIndex, rowElement) => {
            const cells: TableCell[] = []

            $(rowElement).find('td, th').each((cellIndex, cellElement) => {
              const cellText = $(cellElement).text().trim()
              cells.push(new TableCell({
                children: [new Paragraph({
                  children: [new TextRun({
                    text: this.sanitizeText(cellText)
                  })]
                })],
                width: { size: 2000, type: WidthType.DXA }
              }))
            })

            if (cells.length > 0) {
              tableRows.push(new TableRow({ children: cells }))
            }
          })

          if (tableRows.length > 0) {
            elements.push(new Table({
              rows: tableRows,
              width: { size: 100, type: WidthType.PERCENTAGE }
            }))
          }
          break

        case 'blockquote':
          const quoteText = $element.text().trim()
          if (quoteText) {
            elements.push(new Paragraph({
              children: [new TextRun({
                text: this.sanitizeText(quoteText),
                italics: true
              })],
              spacing: { before: 120, after: 120 },
              indent: { left: 720 }, // 0.5英寸缩进
              border: {
                left: {
                  color: 'auto',
                  space: 1,
                  style: 'single',
                  size: 6
                }
              }
            }))
          }
          break

        case 'hr':
          elements.push(new Paragraph({
            children: [new TextRun({
              text: '_______________________________________________',
              color: 'CCCCCC'
            })],
            alignment: AlignmentType.CENTER,
            spacing: { before: 120, after: 120 }
          }))
          break

        default:
          // 处理其他文本内容
          const defaultText = $element.text().trim()
          if (defaultText && !['script', 'style', 'meta', 'link'].includes(tagName || '')) {
            elements.push(new Paragraph({
              children: [new TextRun({
                text: this.sanitizeText(defaultText)
              })],
              spacing: { after: 120 }
            }))
          }
          break
      }
    })

    // 如果没有找到任何元素，添加默认内容
    if (elements.length === 0) {
      elements.push(new Paragraph({
        children: [new TextRun({
          text: 'Document is empty'
        })],
        alignment: AlignmentType.CENTER
      }))
    }

    return elements
  }

  // 添加水印到文档（与工作区3保持一致的实现）
  private addWatermarkToDocument(doc: Document, watermarkConfig: any): Document {
    if (!watermarkConfig?.enabled || !watermarkConfig?.text) {
      return doc
    }

    try {
      // 注意：docx.js的水印功能有限，这里提供基础实现
      // 实际的水印效果主要在PDF导出中实现，Word导出提供简化版本

      // 在文档开头添加水印说明段落（透明度很低，模拟水印效果）
      const watermarkParagraph = new Paragraph({
        children: [
          new TextRun({
            text: `[Watermark: ${this.sanitizeText(watermarkConfig.text)}]`,
            color: this.getWordColorFromConfig(watermarkConfig.color),
            size: Math.max((watermarkConfig.fontSize || 16), 8), // 最小8pt
            italics: true
          })
        ],
        alignment: AlignmentType.CENTER,
        spacing: { after: 120 }
      })

      // 由于docx.js的限制，我们直接返回原文档
      // 在实际应用中，水印主要在PDF中实现
      return doc

    } catch (error) {
      console.warn('水印添加失败，返回原文档:', error)
      return doc
    }
  }

  private getWordColorFromConfig(color: string): string {
    // 颜色映射 - 与工作区3保持一致
    const colorMap: { [key: string]: string } = {
      gray: "6B7280",
      red: "EF4444",
      blue: "3B82F6",
      black: "000000"
    }

    return colorMap[color] || colorMap.gray
  }
}